CODE:

CODE TITLE: Recording and transfer of location information between two boards using Arduino Yuns.

DESCRIPTION:
The main aim here is to record the location of all the tiles and later on, transfer them to the opponent’s board via the internet. Finally, we have to do the reverse, wherein, whenever a tile’s location is located by the player character(s) locally, the LED’s light up progressively in both the current player and his opponent’s board, displaying the score of both players based on their success in searching for their opponent’s hidden treasures.

To this end we make use of the MQTT file transfer protocol to transfer and get messages to and from each board.

We also make use of two Arduino YUN’s, each acting as their individual board’s receiver and transmitter of messages.

OBJECT DEFINITION:
The following objects are used in order to define the sensors, treasures placed and their location, player character moved and so forth.

byte const BOARD_SIZE=14; //Slots in each board
byte const TREASURE_NUM=4; //Number of treasures allowed
byte const GUESS_NUM=1; //Number of guesses per turn, since it is a turn based game the number is 1

//Input/Output pins
byte SENSOR_MATRIX[] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13}; //there are 14 light sensors
byte POINTS_MATRIX[] = {3};
byte RGB_MATRIX[] = {5,6,7};
byte CONTROL_BUTTON=2;

//States of slots
byte const TREASURE_FOUND=2; //Variable denotes the condition when treasure is found
byte const TREASURE=1; //The variable passed whenever the treasure is placed
byte const EMPTY=0; //This is the variable to denote an empty place

VARIABLES USED:

We make use of the following variables in order to define the status of actions such as playing, waiting for another player to make a move and waiting for the results, so as to know who has won the game, what is its status and so on.
  
bool playing; //This game variable helps to understand that a game is underway   
bool waitingForStatus; //This variable tells us of the game status that is underway
bool waitingForResults; //It triggers the conditions/actions that happen when a player wins
char result; //This variable displays the end results 
byte pointsP1, pointsP2; //This variable records, transmits(to other board) and displays the results of both players 


byte treasure_board[BOARD_SIZE] ={0};
byte board_status[BOARD_SIZE] ={0};
byte remote_board_status[BOARD_SIZE] ={0};


CREATING CONNECTIONS:

We make use of the MQTT (Message Queuing Telemetry Transport) protocol to establish the connections between both the boards and their respective Arduino YUN’s.

MQTT server to which we shall connect

byte server[] = { 192,168,0,25};
Messenger message = Messenger(','); 

Instantiate the MQTT client on the server using the default port (1883)
YunClient yunClient;
PubSubClient client(server, 1883, pubSubCallback, yunClient);

void setup() {
  
  Serial.begin(9600);
  
  Serial.println("Initializing Bridge");
  Bridge.begin();
  Serial.println("Done initializing the Bridge");
  message.attach(messageRecieved);
  
Here we connect with the board01 and publish the initial message on board02 and receive message from the same in a two way channel 

  if (client.connect("board01")) {
    Serial.println("Connecting as board01");
    client.publish("/devices/board02/in","begin");
    client.subscribe("/devices/board01/in");
  } 
 
  //Set the mode for each pin of the Arduino used
  for (int i=0; i < sizeof(SENSOR_MATRIX); i++){
    pinMode(SENSOR_MATRIX[i],INPUT);
  }
  
  for (int i=0; i < sizeof(RGB_MATRIX); i++){
    pinMode(RGB_MATRIX[i],OUTPUT);
  }
  for (int i=0; i < sizeof(POINTS_MATRIX); i++){
    pinMode(POINTS_MATRIX[i],OUTPUT);
  }
  pinMode(CONTROL_BUTTON,INPUT);
  
}
Here we receive the message and create a method, which can be called each time a complete message is received and can be processes. Depending on the message set, the appropriate flags are set and necessary values are evaluated.


void messageRecieved(){
  Serial.println("Message recieved");
  if ( message.checkString("status") ) {
    for (int i=0;i<BOARD_SIZE;i++){
      remote_board_status[i]=message.readInt();
    }
    waitingForStatus=false;
  }
  if ( message.checkString("result") ) {
    if ( message.checkString("F") ) {
      result='F';
    } 
    else if ( message.checkString("N") ) {
      result='N';
    }
    waitingForResults = false;
  }
}

This is the method we call, each time the message is received in the MQTT queue and we read all of the messages before adding them to the messenger object.

void pubSubCallback(char* topic, byte* payload, unsigned int length) {
  payload[length] = 13; 
  // The following line is the most effective way of 
  // feeding the serial data to Messenger
  for (int i = 0; i <= length; i++){
    message.process(payload[i]);
  }
}


GAME ALGORITHM/LOGIC:

The main aspect of this segment of the code is to: 
A.)Start a new game and invite the opponent
B.)Reset the values to default if a round of game has already been played prior to the new game being started
C.)Read the position of the treasure and store them so they can be transferred by the MQTT protocol later as and when required.

It is signaled to the user that game is about to being by turning on one of the LED’s

void setUpGame(){
  Serial.println("Setting up board.");
  digitalWrite(RGB_MATRIX[2],HIGH);
  
  //Clean all varaibles to have a fresh start
  memset(treasure_board,0,sizeof(treasure_board));
  memset(board_status,0,sizeof(board_status));
  memset(remote_board_status,0,sizeof(remote_board_status));
  pointsP1=0;
  pointsP2=0;
  playing=true;
  
  Serial.println("Get treasure locations.");
  readBoard(treasure_board, TREASURE_NUM);
  
  for (int i=0; i < BOARD_SIZE; i++){
    Serial.print(treasure_board[i]);
  }
  Serial.println("");

  digitalWrite(RGB_MATRIX[2],LOW);
}

This segment of the code helps in setting the number of turns a player can take in each round and also limits the maximum/minimum number of treasures that can/have to be placed
 
bool checkBoard(byte board[],byte limit){
  byte cont=0;
  Serial.println("Checking that board status is correct.");
  
Counts the number of treasures or tiles in the board, they must match the limit.
  
for (byte i=0; i < BOARD_SIZE; i++){
      if (board[i]==TREASURE){
        cont++;
      }
   }
   if (cont==limit) return true;
   else return false;
}

Reads the board’s status and also the method to read the board sensors and obtain the location of the tokens 

void readBoard(byte board[], byte limit){
  byte value=0;
  while (true){
    Serial.println("Reading board status!!");
    memset(board,0,BOARD_SIZE);

    delay(3000);

    for (byte i=0; i < BOARD_SIZE; i++){
      value=digitalRead(SENSOR_MATRIX[i]);
      if (value==TREASURE){
        board[i]=TREASURE;
      }
      else{
        board[i]=EMPTY;
      }
    }
    if (checkBoard(board,limit)) break;
    else Serial.println("Wrong input try again!!");
  }
}


Now is the time for the local player to act.
He can record his moves, transmit to the opponent’s board and plan his moves based on results obtained.

Let the user know it is his turn by turning on the green light
void turnPlay(){
  digitalWrite(RGB_MATRIX[0],HIGH);
  
  Serial.println("P1 TURN");
  readBoard(board_status,GUESS_NUM);
  sendStatus();
  getResults();
  digitalWrite(RGB_MATRIX[0],LOW);
}


void turnWaitForPlay(){
  /* Let user know is the other player's turn by turning on one of the
   * RGB leds.
   */
  digitalWrite(RGB_MATRIX[1],HIGH);
  
  bool success=false;
  Serial.println("P2 TURN");
  
  getStatus();
  
  Serial.println("Comparing boards!!");
  
  for (byte i=0; i < BOARD_SIZE; i++){
    if ((treasure_board[i]==TREASURE) && (remote_board_status[i]==TREASURE)){
      Serial.println("One of your Treasure's has been found!!");
      treasure_board[i]=TREASURE_FOUND;
      pointsP2++;
      success=true; 
    }
  }
  sendResults(success);
  
  digitalWrite(RGB_MATRIX[1],LOW);
}

Send board status as an MQTT message and pack it with the proper inform from the board and send it to the other player.

void sendStatus(){
  
  char bstatus[sizeof('status') + 2*BOARD_SIZE];
  
  Serial.print("Sending play: ");
  for (int i=0; i < BOARD_SIZE; i++){
    Serial.print(board_status[i]);
  }
  Serial.println("");
  
  sprintf(bstatus,"%s","status");
  
  for (byte i = 0; i < BOARD_SIZE; i++){
    sprintf(bstatus,"%s,%d",bstatus,board_status[i]);
  }
  client.publish("/devices/board02/in",bstatus);
  
}

Get status from your opponent as an MQTT message and let him know that it is your turn by having the LED’s in his board blink red

void getStatus(){
  while(true){
    waitingForStatus=true;
    Serial.println("Waiting for status");
    while(waitingForStatus){
      digitalWrite(RGB_MATRIX[1],LOW);
      client.loop();
      delay(250);
      digitalWrite(RGB_MATRIX[1],HIGH);
      delay(250);
    }
    if (checkBoard(remote_board_status,GUESS_NUM)) break;
    else Serial.println("Board status recieved is wrong, wait for proper input!!");
  }
}

Send the result as an MQTT message and create the message packet with proper info of the board before sending to the opponent

void sendResults(bool success){
  
  Serial.println("Sending results of comparison");
  if (success){
    client.publish("/devices/board02/in","result,F");
    Serial.println("F");
  }
  else{
    Serial.println("N");
    client.publish("/devices/board02/in","result,N");
  }
}

Get the result of the game as an MQTT message and wait unti the proper signaling has been obtained to let the user know when his turn comes forth.

void getResults(){
  waitingForResults=true;
  Serial.println("Waiting for results");
  while(waitingForResults){
    digitalWrite(RGB_MATRIX[0],LOW);
    client.loop();
    delay(250);
    digitalWrite(RGB_MATRIX[0],HIGH);
    delay(250);
  }
  Serial.println(result);
  
  if (result=='F'){
    pointsP1++;
  }
}

This function stores the points and helps display the current score of the game

void paintPoints(){
  if (pointsP1>0){
    digitalWrite(POINTS_MATRIX[pointsP1-1],HIGH);
  }
  if (pointsP2>0){
    digitalWrite(POINTS_MATRIX[pointsP2-1],HIGH);
  }
  delay(1000);
}


Compare both the player’s point obtained, compare it with the maximum obtainable points and check to see if there is a winner

byte checkWinner(){
    if (pointsP1==TREASURE_NUM){
      Serial.println("Found all the tokens, you win :)");
      return 1;
    }
    else if (pointsP2==TREASURE_NUM){
      Serial.println("All your tokens have been found, you loose :(");
      return 2;
    }
    else return 0;
}

The main loop which calls all the functions which constitute the game

void startGame(){
  Serial.println("Start the game!!");
  byte cont=0;
  while(playing){
    cont++;
    Serial.print("------------- Turn ");
    Serial.print(cont);
    Serial.println(" -------------");
    turnPlay();
    paintPoints();
    if (checkWinner()!= 0) break;
    turnWaitForPlay();
    paintPoints();
    if (checkWinner() != 0) break;
  }
}


LICENSE:

CC BY 3.0

TAGS:		
LED’s, mapping, light sensors, Arduino YUN, networked  

